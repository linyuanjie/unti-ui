// source: digitaltwins.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.greet.AgvAgvMapRequest', null, global);
goog.exportSymbol('proto.greet.AgvLocationRequest', null, global);
goog.exportSymbol('proto.greet.BaseModelReply', null, global);
goog.exportSymbol('proto.greet.ContainerRequest', null, global);
goog.exportSymbol('proto.greet.ConveyorRequest', null, global);
goog.exportSymbol('proto.greet.CountAgvReply', null, global);
goog.exportSymbol('proto.greet.CountAgvReply.agvInfo', null, global);
goog.exportSymbol('proto.greet.CountConveyorReply', null, global);
goog.exportSymbol('proto.greet.CountEquipmentReply', null, global);
goog.exportSymbol('proto.greet.CountEquipmentReply.equipmentInfo', null, global);
goog.exportSymbol('proto.greet.CountProductionLineReply', null, global);
goog.exportSymbol('proto.greet.CountRequest', null, global);
goog.exportSymbol('proto.greet.CountWarehouseReply', null, global);
goog.exportSymbol('proto.greet.CountWarehouseReply.warehouseInfo', null, global);
goog.exportSymbol('proto.greet.EquipmentRequest', null, global);
goog.exportSymbol('proto.greet.MaterialRequest', null, global);
goog.exportSymbol('proto.greet.MockReply', null, global);
goog.exportSymbol('proto.greet.MockRequest', null, global);
goog.exportSymbol('proto.greet.MockStateInfoReply', null, global);
goog.exportSymbol('proto.greet.MockStateInfoReply.AgvInfo', null, global);
goog.exportSymbol('proto.greet.MockStateInfoReply.MockGoodsInfo', null, global);
goog.exportSymbol('proto.greet.MockStateInfoRequest', null, global);
goog.exportSymbol('proto.greet.ModelState', null, global);
goog.exportSymbol('proto.greet.ModelType', null, global);
goog.exportSymbol('proto.greet.SendTaskRequest', null, global);
goog.exportSymbol('proto.greet.SimulationReply', null, global);
goog.exportSymbol('proto.greet.SimulationRequest', null, global);
goog.exportSymbol('proto.greet.StasticModelReply', null, global);
goog.exportSymbol('proto.greet.StateSynclRequest', null, global);
goog.exportSymbol('proto.greet.TwinsAgvTaskCountReply', null, global);
goog.exportSymbol('proto.greet.TwinsAgvTaskCountReply.AgvTask', null, global);
goog.exportSymbol('proto.greet.TwinsStockMovementCountReply', null, global);
goog.exportSymbol('proto.greet.TwinsStockMovementCountReply.StockMovement', null, global);
goog.exportSymbol('proto.greet.TwinsWarehouseBayStatusReply', null, global);
goog.exportSymbol('proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus', null, global);
goog.exportSymbol('proto.greet.TwinsWarehouseCountReply', null, global);
goog.exportSymbol('proto.greet.TwinsWarehouseCountReply.WareTrayStatus', null, global);
goog.exportSymbol('proto.greet.WarehouseRequest', null, global);
goog.exportSymbol('proto.greet.WorkFlowRequest', null, global);
goog.exportSymbol('proto.greet.WorkFlowRequest.FlowNodeInfo', null, global);
goog.exportSymbol('proto.greet.WorkFlowRequest.agvMapInfo', null, global);
goog.exportSymbol('proto.greet.WorkFlowRequest.modelProperty', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.StateSynclRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.StateSynclRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.StateSynclRequest.displayName = 'proto.greet.StateSynclRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.AgvAgvMapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.AgvAgvMapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.AgvAgvMapRequest.displayName = 'proto.greet.AgvAgvMapRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.AgvLocationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.AgvLocationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.AgvLocationRequest.displayName = 'proto.greet.AgvLocationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.SendTaskRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.SendTaskRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.SendTaskRequest.displayName = 'proto.greet.SendTaskRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.BaseModelReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.BaseModelReply.repeatedFields_, null);
};
goog.inherits(proto.greet.BaseModelReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.BaseModelReply.displayName = 'proto.greet.BaseModelReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.ConveyorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.ConveyorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.ConveyorRequest.displayName = 'proto.greet.ConveyorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.StasticModelReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.StasticModelReply.repeatedFields_, null);
};
goog.inherits(proto.greet.StasticModelReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.StasticModelReply.displayName = 'proto.greet.StasticModelReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.EquipmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.EquipmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.EquipmentRequest.displayName = 'proto.greet.EquipmentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.WarehouseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.WarehouseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.WarehouseRequest.displayName = 'proto.greet.WarehouseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.MaterialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.MaterialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.MaterialRequest.displayName = 'proto.greet.MaterialRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.ContainerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.ContainerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.ContainerRequest.displayName = 'proto.greet.ContainerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.SimulationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.SimulationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.SimulationRequest.displayName = 'proto.greet.SimulationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.WorkFlowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.WorkFlowRequest.repeatedFields_, null);
};
goog.inherits(proto.greet.WorkFlowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.WorkFlowRequest.displayName = 'proto.greet.WorkFlowRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.WorkFlowRequest.modelProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.WorkFlowRequest.modelProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.WorkFlowRequest.modelProperty.displayName = 'proto.greet.WorkFlowRequest.modelProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.WorkFlowRequest.FlowNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.WorkFlowRequest.FlowNodeInfo.repeatedFields_, null);
};
goog.inherits(proto.greet.WorkFlowRequest.FlowNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.WorkFlowRequest.FlowNodeInfo.displayName = 'proto.greet.WorkFlowRequest.FlowNodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.WorkFlowRequest.agvMapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.WorkFlowRequest.agvMapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.WorkFlowRequest.agvMapInfo.displayName = 'proto.greet.WorkFlowRequest.agvMapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.SimulationReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.SimulationReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.SimulationReply.displayName = 'proto.greet.SimulationReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.CountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.CountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.CountRequest.displayName = 'proto.greet.CountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.CountWarehouseReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.CountWarehouseReply.repeatedFields_, null);
};
goog.inherits(proto.greet.CountWarehouseReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.CountWarehouseReply.displayName = 'proto.greet.CountWarehouseReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.CountWarehouseReply.warehouseInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.CountWarehouseReply.warehouseInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.CountWarehouseReply.warehouseInfo.displayName = 'proto.greet.CountWarehouseReply.warehouseInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.CountEquipmentReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.CountEquipmentReply.repeatedFields_, null);
};
goog.inherits(proto.greet.CountEquipmentReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.CountEquipmentReply.displayName = 'proto.greet.CountEquipmentReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.CountEquipmentReply.equipmentInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.CountEquipmentReply.equipmentInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.CountEquipmentReply.equipmentInfo.displayName = 'proto.greet.CountEquipmentReply.equipmentInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.CountConveyorReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.CountConveyorReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.CountConveyorReply.displayName = 'proto.greet.CountConveyorReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.CountProductionLineReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.CountProductionLineReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.CountProductionLineReply.displayName = 'proto.greet.CountProductionLineReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.CountAgvReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.CountAgvReply.repeatedFields_, null);
};
goog.inherits(proto.greet.CountAgvReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.CountAgvReply.displayName = 'proto.greet.CountAgvReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.CountAgvReply.agvInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.CountAgvReply.agvInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.CountAgvReply.agvInfo.displayName = 'proto.greet.CountAgvReply.agvInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.MockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.MockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.MockRequest.displayName = 'proto.greet.MockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.MockReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.MockReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.MockReply.displayName = 'proto.greet.MockReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.MockStateInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.MockStateInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.MockStateInfoRequest.displayName = 'proto.greet.MockStateInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.MockStateInfoReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.MockStateInfoReply.repeatedFields_, null);
};
goog.inherits(proto.greet.MockStateInfoReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.MockStateInfoReply.displayName = 'proto.greet.MockStateInfoReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.MockStateInfoReply.MockGoodsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.MockStateInfoReply.MockGoodsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.MockStateInfoReply.MockGoodsInfo.displayName = 'proto.greet.MockStateInfoReply.MockGoodsInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.MockStateInfoReply.AgvInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.MockStateInfoReply.AgvInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.MockStateInfoReply.AgvInfo.displayName = 'proto.greet.MockStateInfoReply.AgvInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.TwinsWarehouseBayStatusReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.TwinsWarehouseBayStatusReply.repeatedFields_, null);
};
goog.inherits(proto.greet.TwinsWarehouseBayStatusReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.TwinsWarehouseBayStatusReply.displayName = 'proto.greet.TwinsWarehouseBayStatusReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.displayName = 'proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.TwinsAgvTaskCountReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.TwinsAgvTaskCountReply.repeatedFields_, null);
};
goog.inherits(proto.greet.TwinsAgvTaskCountReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.TwinsAgvTaskCountReply.displayName = 'proto.greet.TwinsAgvTaskCountReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.TwinsAgvTaskCountReply.AgvTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.TwinsAgvTaskCountReply.AgvTask.displayName = 'proto.greet.TwinsAgvTaskCountReply.AgvTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.TwinsWarehouseCountReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.TwinsWarehouseCountReply.repeatedFields_, null);
};
goog.inherits(proto.greet.TwinsWarehouseCountReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.TwinsWarehouseCountReply.displayName = 'proto.greet.TwinsWarehouseCountReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.TwinsWarehouseCountReply.WareTrayStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.TwinsWarehouseCountReply.WareTrayStatus.displayName = 'proto.greet.TwinsWarehouseCountReply.WareTrayStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.TwinsStockMovementCountReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greet.TwinsStockMovementCountReply.repeatedFields_, null);
};
goog.inherits(proto.greet.TwinsStockMovementCountReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.TwinsStockMovementCountReply.displayName = 'proto.greet.TwinsStockMovementCountReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greet.TwinsStockMovementCountReply.StockMovement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greet.TwinsStockMovementCountReply.StockMovement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greet.TwinsStockMovementCountReply.StockMovement.displayName = 'proto.greet.TwinsStockMovementCountReply.StockMovement';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.StateSynclRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.StateSynclRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.StateSynclRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.StateSynclRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflownum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    num: jspb.Message.getFieldWithDefault(msg, 2, ""),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.StateSynclRequest}
 */
proto.greet.StateSynclRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.StateSynclRequest;
  return proto.greet.StateSynclRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.StateSynclRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.StateSynclRequest}
 */
proto.greet.StateSynclRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.StateSynclRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.StateSynclRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.StateSynclRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.StateSynclRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNum();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string workflowNum = 1;
 * @return {string}
 */
proto.greet.StateSynclRequest.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.StateSynclRequest} returns this
 */
proto.greet.StateSynclRequest.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string num = 2;
 * @return {string}
 */
proto.greet.StateSynclRequest.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.StateSynclRequest} returns this
 */
proto.greet.StateSynclRequest.prototype.setNum = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 state = 3;
 * @return {number}
 */
proto.greet.StateSynclRequest.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.StateSynclRequest} returns this
 */
proto.greet.StateSynclRequest.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.AgvAgvMapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.AgvAgvMapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.AgvAgvMapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.AgvAgvMapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflownum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    region: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.AgvAgvMapRequest}
 */
proto.greet.AgvAgvMapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.AgvAgvMapRequest;
  return proto.greet.AgvAgvMapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.AgvAgvMapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.AgvAgvMapRequest}
 */
proto.greet.AgvAgvMapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.AgvAgvMapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.AgvAgvMapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.AgvAgvMapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.AgvAgvMapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string workflowNum = 1;
 * @return {string}
 */
proto.greet.AgvAgvMapRequest.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.AgvAgvMapRequest} returns this
 */
proto.greet.AgvAgvMapRequest.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string region = 2;
 * @return {string}
 */
proto.greet.AgvAgvMapRequest.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.AgvAgvMapRequest} returns this
 */
proto.greet.AgvAgvMapRequest.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.AgvLocationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.AgvLocationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.AgvLocationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.AgvLocationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflownum: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.AgvLocationRequest}
 */
proto.greet.AgvLocationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.AgvLocationRequest;
  return proto.greet.AgvLocationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.AgvLocationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.AgvLocationRequest}
 */
proto.greet.AgvLocationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.AgvLocationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.AgvLocationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.AgvLocationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.AgvLocationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string workflowNum = 1;
 * @return {string}
 */
proto.greet.AgvLocationRequest.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.AgvLocationRequest} returns this
 */
proto.greet.AgvLocationRequest.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.SendTaskRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.SendTaskRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.SendTaskRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.SendTaskRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflownum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    starty: jspb.Message.getFieldWithDefault(msg, 3, 0),
    goalx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    goaly: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.SendTaskRequest}
 */
proto.greet.SendTaskRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.SendTaskRequest;
  return proto.greet.SendTaskRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.SendTaskRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.SendTaskRequest}
 */
proto.greet.SendTaskRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarty(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGoalx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGoaly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.SendTaskRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.SendTaskRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.SendTaskRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.SendTaskRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStarty();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getGoalx();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getGoaly();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string workflowNum = 1;
 * @return {string}
 */
proto.greet.SendTaskRequest.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.SendTaskRequest} returns this
 */
proto.greet.SendTaskRequest.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 startX = 2;
 * @return {number}
 */
proto.greet.SendTaskRequest.prototype.getStartx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.SendTaskRequest} returns this
 */
proto.greet.SendTaskRequest.prototype.setStartx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 startY = 3;
 * @return {number}
 */
proto.greet.SendTaskRequest.prototype.getStarty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.SendTaskRequest} returns this
 */
proto.greet.SendTaskRequest.prototype.setStarty = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 goalX = 4;
 * @return {number}
 */
proto.greet.SendTaskRequest.prototype.getGoalx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.SendTaskRequest} returns this
 */
proto.greet.SendTaskRequest.prototype.setGoalx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 goalY = 5;
 * @return {number}
 */
proto.greet.SendTaskRequest.prototype.getGoaly = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.SendTaskRequest} returns this
 */
proto.greet.SendTaskRequest.prototype.setGoaly = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.BaseModelReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.BaseModelReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.BaseModelReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.BaseModelReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.BaseModelReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.BaseModelReply}
 */
proto.greet.BaseModelReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.BaseModelReply;
  return proto.greet.BaseModelReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.BaseModelReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.BaseModelReply}
 */
proto.greet.BaseModelReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.BaseModelReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.BaseModelReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.BaseModelReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.BaseModelReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.greet.BaseModelReply.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.BaseModelReply} returns this
 */
proto.greet.BaseModelReply.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.greet.BaseModelReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.BaseModelReply} returns this
 */
proto.greet.BaseModelReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string data = 3;
 * @return {!Array<string>}
 */
proto.greet.BaseModelReply.prototype.getDataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.greet.BaseModelReply} returns this
 */
proto.greet.BaseModelReply.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.greet.BaseModelReply} returns this
 */
proto.greet.BaseModelReply.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.BaseModelReply} returns this
 */
proto.greet.BaseModelReply.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.ConveyorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.ConveyorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.ConveyorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.ConveyorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    region: jspb.Message.getFieldWithDefault(msg, 3, ""),
    posx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    posy: jspb.Message.getFieldWithDefault(msg, 5, 0),
    direct: jspb.Message.getFieldWithDefault(msg, 6, 0),
    turncycletime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    speed: jspb.Message.getFieldWithDefault(msg, 8, 0),
    minspeed: jspb.Message.getFieldWithDefault(msg, 9, 0),
    maxspeed: jspb.Message.getFieldWithDefault(msg, 10, 0),
    length: jspb.Message.getFieldWithDefault(msg, 11, 0),
    width: jspb.Message.getFieldWithDefault(msg, 12, 0),
    height: jspb.Message.getFieldWithDefault(msg, 13, 0),
    power: jspb.Message.getFieldWithDefault(msg, 14, 0),
    standbypower: jspb.Message.getFieldWithDefault(msg, 15, 0),
    minpower: jspb.Message.getFieldWithDefault(msg, 16, 0),
    maxpower: jspb.Message.getFieldWithDefault(msg, 17, 0),
    converytype: jspb.Message.getFieldWithDefault(msg, 18, 0),
    state: jspb.Message.getFieldWithDefault(msg, 19, 0),
    materialcountper: jspb.Message.getFieldWithDefault(msg, 20, 0),
    batterylevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.0),
    note: jspb.Message.getFieldWithDefault(msg, 22, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.ConveyorRequest}
 */
proto.greet.ConveyorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.ConveyorRequest;
  return proto.greet.ConveyorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.ConveyorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.ConveyorRequest}
 */
proto.greet.ConveyorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPosx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPosy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDirect(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurncycletime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpeed(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinspeed(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxspeed(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPower(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStandbypower(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinpower(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxpower(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConverytype(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaterialcountper(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBatterylevel(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.ConveyorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.ConveyorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.ConveyorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.ConveyorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getDirect();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTurncycletime();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMinspeed();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMaxspeed();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getStandbypower();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getMinpower();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getMaxpower();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getConverytype();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getMaterialcountper();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getBatterylevel();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
};


/**
 * optional string num = 1;
 * @return {string}
 */
proto.greet.ConveyorRequest.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setNum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.greet.ConveyorRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string region = 3;
 * @return {string}
 */
proto.greet.ConveyorRequest.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 posX = 4;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getPosx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setPosx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 posY = 5;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getPosy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setPosy = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 direct = 6;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getDirect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setDirect = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 turnCycleTime = 7;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getTurncycletime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setTurncycletime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 speed = 8;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 minSpeed = 9;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getMinspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setMinspeed = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 maxSpeed = 10;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getMaxspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setMaxspeed = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 length = 11;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 width = 12;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 height = 13;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 power = 14;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 standbyPower = 15;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getStandbypower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setStandbypower = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 minPower = 16;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getMinpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setMinpower = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 maxPower = 17;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getMaxpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setMaxpower = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 converyType = 18;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getConverytype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setConverytype = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 state = 19;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 materialCountPer = 20;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getMaterialcountper = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setMaterialcountper = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional double batteryLevel = 21;
 * @return {number}
 */
proto.greet.ConveyorRequest.prototype.getBatterylevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setBatterylevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional string note = 22;
 * @return {string}
 */
proto.greet.ConveyorRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ConveyorRequest} returns this
 */
proto.greet.ConveyorRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.StasticModelReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.StasticModelReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.StasticModelReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.StasticModelReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.StasticModelReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.StasticModelReply}
 */
proto.greet.StasticModelReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.StasticModelReply;
  return proto.greet.StasticModelReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.StasticModelReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.StasticModelReply}
 */
proto.greet.StasticModelReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.StasticModelReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.StasticModelReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.StasticModelReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.StasticModelReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.greet.StasticModelReply.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.StasticModelReply} returns this
 */
proto.greet.StasticModelReply.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.greet.StasticModelReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.StasticModelReply} returns this
 */
proto.greet.StasticModelReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string data = 3;
 * @return {!Array<string>}
 */
proto.greet.StasticModelReply.prototype.getDataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.greet.StasticModelReply} returns this
 */
proto.greet.StasticModelReply.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.greet.StasticModelReply} returns this
 */
proto.greet.StasticModelReply.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.StasticModelReply} returns this
 */
proto.greet.StasticModelReply.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.EquipmentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.EquipmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.EquipmentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.EquipmentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    region: jspb.Message.getFieldWithDefault(msg, 3, ""),
    posx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    posy: jspb.Message.getFieldWithDefault(msg, 5, 0),
    direct: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cycletime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    mincycletime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    maxcycletime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    length: jspb.Message.getFieldWithDefault(msg, 10, 0),
    width: jspb.Message.getFieldWithDefault(msg, 11, 0),
    height: jspb.Message.getFieldWithDefault(msg, 12, 0),
    power: jspb.Message.getFieldWithDefault(msg, 13, 0),
    standbypower: jspb.Message.getFieldWithDefault(msg, 14, 0),
    minpower: jspb.Message.getFieldWithDefault(msg, 15, 0),
    maxpower: jspb.Message.getFieldWithDefault(msg, 16, 0),
    epuipmenttype: jspb.Message.getFieldWithDefault(msg, 17, 0),
    state: jspb.Message.getFieldWithDefault(msg, 18, 0),
    materialcountper: jspb.Message.getFieldWithDefault(msg, 19, 0),
    holdingtime: jspb.Message.getFieldWithDefault(msg, 20, 0),
    note: jspb.Message.getFieldWithDefault(msg, 21, ""),
    groupindex: jspb.Message.getFieldWithDefault(msg, 22, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.EquipmentRequest}
 */
proto.greet.EquipmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.EquipmentRequest;
  return proto.greet.EquipmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.EquipmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.EquipmentRequest}
 */
proto.greet.EquipmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPosx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPosy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDirect(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCycletime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMincycletime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxcycletime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPower(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStandbypower(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinpower(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxpower(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEpuipmenttype(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaterialcountper(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHoldingtime(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.EquipmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.EquipmentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.EquipmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.EquipmentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getDirect();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCycletime();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getMincycletime();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMaxcycletime();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getStandbypower();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getMinpower();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getMaxpower();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getEpuipmenttype();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getMaterialcountper();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getHoldingtime();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getGroupindex();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
};


/**
 * optional string num = 1;
 * @return {string}
 */
proto.greet.EquipmentRequest.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setNum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.greet.EquipmentRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string region = 3;
 * @return {string}
 */
proto.greet.EquipmentRequest.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 posX = 4;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getPosx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setPosx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 posY = 5;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getPosy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setPosy = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 direct = 6;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getDirect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setDirect = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 cycleTime = 7;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getCycletime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setCycletime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 minCycleTime = 8;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getMincycletime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setMincycletime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 maxCycleTime = 9;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getMaxcycletime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setMaxcycletime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 length = 10;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 width = 11;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 height = 12;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 power = 13;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 standbyPower = 14;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getStandbypower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setStandbypower = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 minPower = 15;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getMinpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setMinpower = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 maxPower = 16;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getMaxpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setMaxpower = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 epuipmentType = 17;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getEpuipmenttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setEpuipmenttype = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 state = 18;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 materialCountPer = 19;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getMaterialcountper = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setMaterialcountper = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 holdingTime = 20;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getHoldingtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setHoldingtime = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional string note = 21;
 * @return {string}
 */
proto.greet.EquipmentRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional int32 groupIndex = 22;
 * @return {number}
 */
proto.greet.EquipmentRequest.prototype.getGroupindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.EquipmentRequest} returns this
 */
proto.greet.EquipmentRequest.prototype.setGroupindex = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.WarehouseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.WarehouseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.WarehouseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.WarehouseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    region: jspb.Message.getFieldWithDefault(msg, 3, ""),
    posx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    posy: jspb.Message.getFieldWithDefault(msg, 5, 0),
    direct: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cycletime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    mincycletime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    maxcycletime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    length: jspb.Message.getFieldWithDefault(msg, 10, 0),
    width: jspb.Message.getFieldWithDefault(msg, 11, 0),
    height: jspb.Message.getFieldWithDefault(msg, 12, 0),
    power: jspb.Message.getFieldWithDefault(msg, 13, 0),
    standbypower: jspb.Message.getFieldWithDefault(msg, 14, 0),
    minpower: jspb.Message.getFieldWithDefault(msg, 15, 0),
    maxpower: jspb.Message.getFieldWithDefault(msg, 16, 0),
    warehousetype: jspb.Message.getFieldWithDefault(msg, 17, 0),
    state: jspb.Message.getFieldWithDefault(msg, 18, 0),
    unitcount: jspb.Message.getFieldWithDefault(msg, 19, 0),
    unitalarmthreshold: jspb.Message.getFieldWithDefault(msg, 20, 0),
    materialcountper: jspb.Message.getFieldWithDefault(msg, 21, 0),
    note: jspb.Message.getFieldWithDefault(msg, 22, ""),
    shelvestype: jspb.Message.getFieldWithDefault(msg, 23, 0),
    warehouserowcount: jspb.Message.getFieldWithDefault(msg, 24, 0),
    warehousecolumncount: jspb.Message.getFieldWithDefault(msg, 25, 0),
    warehousingstrategy: jspb.Message.getFieldWithDefault(msg, 26, 0),
    cellswidth: jspb.Message.getFieldWithDefault(msg, 27, 0),
    cellsheight: jspb.Message.getFieldWithDefault(msg, 28, 0),
    cellslength: jspb.Message.getFieldWithDefault(msg, 29, 0),
    liftspeed: jspb.Message.getFieldWithDefault(msg, 30, 0),
    movespeed: jspb.Message.getFieldWithDefault(msg, 31, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.WarehouseRequest}
 */
proto.greet.WarehouseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.WarehouseRequest;
  return proto.greet.WarehouseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.WarehouseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.WarehouseRequest}
 */
proto.greet.WarehouseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPosx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPosy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDirect(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCycletime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMincycletime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxcycletime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPower(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStandbypower(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinpower(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxpower(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWarehousetype(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnitcount(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnitalarmthreshold(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaterialcountper(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShelvestype(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWarehouserowcount(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWarehousecolumncount(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWarehousingstrategy(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCellswidth(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCellsheight(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCellslength(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLiftspeed(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMovespeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.WarehouseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.WarehouseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.WarehouseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.WarehouseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getDirect();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCycletime();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getMincycletime();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMaxcycletime();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getStandbypower();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getMinpower();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getMaxpower();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getWarehousetype();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getUnitcount();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getUnitalarmthreshold();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getMaterialcountper();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getShelvestype();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getWarehouserowcount();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getWarehousecolumncount();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getWarehousingstrategy();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getCellswidth();
  if (f !== 0) {
    writer.writeInt32(
      27,
      f
    );
  }
  f = message.getCellsheight();
  if (f !== 0) {
    writer.writeInt32(
      28,
      f
    );
  }
  f = message.getCellslength();
  if (f !== 0) {
    writer.writeInt32(
      29,
      f
    );
  }
  f = message.getLiftspeed();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
  f = message.getMovespeed();
  if (f !== 0) {
    writer.writeInt32(
      31,
      f
    );
  }
};


/**
 * optional string num = 1;
 * @return {string}
 */
proto.greet.WarehouseRequest.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setNum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.greet.WarehouseRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string region = 3;
 * @return {string}
 */
proto.greet.WarehouseRequest.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 posX = 4;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getPosx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setPosx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 posY = 5;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getPosy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setPosy = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 direct = 6;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getDirect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setDirect = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 cycleTime = 7;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getCycletime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setCycletime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 minCycleTime = 8;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getMincycletime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setMincycletime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 maxCycleTime = 9;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getMaxcycletime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setMaxcycletime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 length = 10;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 width = 11;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 height = 12;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 power = 13;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 standbyPower = 14;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getStandbypower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setStandbypower = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 minPower = 15;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getMinpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setMinpower = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 maxPower = 16;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getMaxpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setMaxpower = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 warehouseType = 17;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getWarehousetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setWarehousetype = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 state = 18;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 unitCount = 19;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getUnitcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setUnitcount = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 unitAlarmThreshold = 20;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getUnitalarmthreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setUnitalarmthreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 materialCountPer = 21;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getMaterialcountper = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setMaterialcountper = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional string note = 22;
 * @return {string}
 */
proto.greet.WarehouseRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional int32 shelvesType = 23;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getShelvestype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setShelvestype = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int32 warehouseRowCount = 24;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getWarehouserowcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setWarehouserowcount = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int32 warehouseColumnCount = 25;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getWarehousecolumncount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setWarehousecolumncount = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional int32 warehousingStrategy = 26;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getWarehousingstrategy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setWarehousingstrategy = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional int32 cellsWidth = 27;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getCellswidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setCellswidth = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional int32 cellsHeight = 28;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getCellsheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setCellsheight = function(value) {
  return jspb.Message.setProto3IntField(this, 28, value);
};


/**
 * optional int32 cellsLength = 29;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getCellslength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setCellslength = function(value) {
  return jspb.Message.setProto3IntField(this, 29, value);
};


/**
 * optional int32 liftSpeed = 30;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getLiftspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setLiftspeed = function(value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};


/**
 * optional int32 moveSpeed = 31;
 * @return {number}
 */
proto.greet.WarehouseRequest.prototype.getMovespeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WarehouseRequest} returns this
 */
proto.greet.WarehouseRequest.prototype.setMovespeed = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.MaterialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.MaterialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.MaterialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MaterialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    length: jspb.Message.getFieldWithDefault(msg, 3, 0),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    containernum: jspb.Message.getFieldWithDefault(msg, 6, ""),
    posnum: jspb.Message.getFieldWithDefault(msg, 7, ""),
    weight: jspb.Message.getFieldWithDefault(msg, 8, 0),
    state: jspb.Message.getFieldWithDefault(msg, 9, 0),
    note: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.MaterialRequest}
 */
proto.greet.MaterialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.MaterialRequest;
  return proto.greet.MaterialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.MaterialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.MaterialRequest}
 */
proto.greet.MaterialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainernum(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosnum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.MaterialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.MaterialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.MaterialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MaterialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getContainernum();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPosnum();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string num = 1;
 * @return {string}
 */
proto.greet.MaterialRequest.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MaterialRequest} returns this
 */
proto.greet.MaterialRequest.prototype.setNum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.greet.MaterialRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MaterialRequest} returns this
 */
proto.greet.MaterialRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 length = 3;
 * @return {number}
 */
proto.greet.MaterialRequest.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MaterialRequest} returns this
 */
proto.greet.MaterialRequest.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 width = 4;
 * @return {number}
 */
proto.greet.MaterialRequest.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MaterialRequest} returns this
 */
proto.greet.MaterialRequest.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 height = 5;
 * @return {number}
 */
proto.greet.MaterialRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MaterialRequest} returns this
 */
proto.greet.MaterialRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string containerNum = 6;
 * @return {string}
 */
proto.greet.MaterialRequest.prototype.getContainernum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MaterialRequest} returns this
 */
proto.greet.MaterialRequest.prototype.setContainernum = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string posNum = 7;
 * @return {string}
 */
proto.greet.MaterialRequest.prototype.getPosnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MaterialRequest} returns this
 */
proto.greet.MaterialRequest.prototype.setPosnum = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 weight = 8;
 * @return {number}
 */
proto.greet.MaterialRequest.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MaterialRequest} returns this
 */
proto.greet.MaterialRequest.prototype.setWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 state = 9;
 * @return {number}
 */
proto.greet.MaterialRequest.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MaterialRequest} returns this
 */
proto.greet.MaterialRequest.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string note = 10;
 * @return {string}
 */
proto.greet.MaterialRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MaterialRequest} returns this
 */
proto.greet.MaterialRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.ContainerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.ContainerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.ContainerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.ContainerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    length: jspb.Message.getFieldWithDefault(msg, 3, 0),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    containernum: jspb.Message.getFieldWithDefault(msg, 6, ""),
    posnum: jspb.Message.getFieldWithDefault(msg, 7, ""),
    capacity: jspb.Message.getFieldWithDefault(msg, 8, 0),
    state: jspb.Message.getFieldWithDefault(msg, 9, 0),
    note: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.ContainerRequest}
 */
proto.greet.ContainerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.ContainerRequest;
  return proto.greet.ContainerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.ContainerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.ContainerRequest}
 */
proto.greet.ContainerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainernum(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosnum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCapacity(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.ContainerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.ContainerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.ContainerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.ContainerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getContainernum();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPosnum();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCapacity();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string num = 1;
 * @return {string}
 */
proto.greet.ContainerRequest.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ContainerRequest} returns this
 */
proto.greet.ContainerRequest.prototype.setNum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.greet.ContainerRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ContainerRequest} returns this
 */
proto.greet.ContainerRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 length = 3;
 * @return {number}
 */
proto.greet.ContainerRequest.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ContainerRequest} returns this
 */
proto.greet.ContainerRequest.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 width = 4;
 * @return {number}
 */
proto.greet.ContainerRequest.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ContainerRequest} returns this
 */
proto.greet.ContainerRequest.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 height = 5;
 * @return {number}
 */
proto.greet.ContainerRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ContainerRequest} returns this
 */
proto.greet.ContainerRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string containerNum = 6;
 * @return {string}
 */
proto.greet.ContainerRequest.prototype.getContainernum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ContainerRequest} returns this
 */
proto.greet.ContainerRequest.prototype.setContainernum = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string posNum = 7;
 * @return {string}
 */
proto.greet.ContainerRequest.prototype.getPosnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ContainerRequest} returns this
 */
proto.greet.ContainerRequest.prototype.setPosnum = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 capacity = 8;
 * @return {number}
 */
proto.greet.ContainerRequest.prototype.getCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ContainerRequest} returns this
 */
proto.greet.ContainerRequest.prototype.setCapacity = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 state = 9;
 * @return {number}
 */
proto.greet.ContainerRequest.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.ContainerRequest} returns this
 */
proto.greet.ContainerRequest.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string note = 10;
 * @return {string}
 */
proto.greet.ContainerRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.ContainerRequest} returns this
 */
proto.greet.ContainerRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.SimulationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.SimulationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.SimulationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.SimulationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflownum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    simulationtype: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.SimulationRequest}
 */
proto.greet.SimulationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.SimulationRequest;
  return proto.greet.SimulationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.SimulationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.SimulationRequest}
 */
proto.greet.SimulationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSimulationtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.SimulationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.SimulationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.SimulationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.SimulationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSimulationtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string workflowNum = 1;
 * @return {string}
 */
proto.greet.SimulationRequest.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.SimulationRequest} returns this
 */
proto.greet.SimulationRequest.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string simulationType = 2;
 * @return {string}
 */
proto.greet.SimulationRequest.prototype.getSimulationtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.SimulationRequest} returns this
 */
proto.greet.SimulationRequest.prototype.setSimulationtype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.WorkFlowRequest.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.WorkFlowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.WorkFlowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.WorkFlowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.WorkFlowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflownum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    modelnodeList: jspb.Message.toObjectList(msg.getModelnodeList(),
    proto.greet.WorkFlowRequest.modelProperty.toObject, includeInstance),
    flownodeList: jspb.Message.toObjectList(msg.getFlownodeList(),
    proto.greet.WorkFlowRequest.FlowNodeInfo.toObject, includeInstance),
    agvmapnodeList: jspb.Message.toObjectList(msg.getAgvmapnodeList(),
    proto.greet.WorkFlowRequest.agvMapInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.WorkFlowRequest}
 */
proto.greet.WorkFlowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.WorkFlowRequest;
  return proto.greet.WorkFlowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.WorkFlowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.WorkFlowRequest}
 */
proto.greet.WorkFlowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    case 2:
      var value = new proto.greet.WorkFlowRequest.modelProperty;
      reader.readMessage(value,proto.greet.WorkFlowRequest.modelProperty.deserializeBinaryFromReader);
      msg.addModelnode(value);
      break;
    case 3:
      var value = new proto.greet.WorkFlowRequest.FlowNodeInfo;
      reader.readMessage(value,proto.greet.WorkFlowRequest.FlowNodeInfo.deserializeBinaryFromReader);
      msg.addFlownode(value);
      break;
    case 4:
      var value = new proto.greet.WorkFlowRequest.agvMapInfo;
      reader.readMessage(value,proto.greet.WorkFlowRequest.agvMapInfo.deserializeBinaryFromReader);
      msg.addAgvmapnode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.WorkFlowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.WorkFlowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.WorkFlowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.WorkFlowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModelnodeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.greet.WorkFlowRequest.modelProperty.serializeBinaryToWriter
    );
  }
  f = message.getFlownodeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.greet.WorkFlowRequest.FlowNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getAgvmapnodeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.greet.WorkFlowRequest.agvMapInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.WorkFlowRequest.modelProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.WorkFlowRequest.modelProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.WorkFlowRequest.modelProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.WorkFlowRequest.modelProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelnum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    modeltype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    modelinfoMap: (f = msg.getModelinfoMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.WorkFlowRequest.modelProperty}
 */
proto.greet.WorkFlowRequest.modelProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.WorkFlowRequest.modelProperty;
  return proto.greet.WorkFlowRequest.modelProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.WorkFlowRequest.modelProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.WorkFlowRequest.modelProperty}
 */
proto.greet.WorkFlowRequest.modelProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModeltype(value);
      break;
    case 3:
      var value = msg.getModelinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.WorkFlowRequest.modelProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.WorkFlowRequest.modelProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.WorkFlowRequest.modelProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.WorkFlowRequest.modelProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelnum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModeltype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getModelinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string modelNum = 1;
 * @return {string}
 */
proto.greet.WorkFlowRequest.modelProperty.prototype.getModelnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WorkFlowRequest.modelProperty} returns this
 */
proto.greet.WorkFlowRequest.modelProperty.prototype.setModelnum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 modelType = 2;
 * @return {number}
 */
proto.greet.WorkFlowRequest.modelProperty.prototype.getModeltype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WorkFlowRequest.modelProperty} returns this
 */
proto.greet.WorkFlowRequest.modelProperty.prototype.setModeltype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<string, string> modelInfo = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.greet.WorkFlowRequest.modelProperty.prototype.getModelinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.greet.WorkFlowRequest.modelProperty} returns this
 */
proto.greet.WorkFlowRequest.modelProperty.prototype.clearModelinfoMap = function() {
  this.getModelinfoMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.WorkFlowRequest.FlowNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.WorkFlowRequest.FlowNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelnum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outputstrategy: jspb.Message.getFieldWithDefault(msg, 2, 0),
    outputlinkid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    outputportsmodelnumsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    outputportsstrategyvaluesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    inputlinkidsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    transportmode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    agvcoordcode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    agvinterfacetype: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.WorkFlowRequest.FlowNodeInfo;
  return proto.greet.WorkFlowRequest.FlowNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.WorkFlowRequest.FlowNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputstrategy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputlinkid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOutputportsmodelnums(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOutputportsstrategyvalues(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addInputlinkids(values[i]);
      }
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransportmode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgvcoordcode(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAgvinterfacetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.WorkFlowRequest.FlowNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.WorkFlowRequest.FlowNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelnum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutputstrategy();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOutputlinkid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOutputportsmodelnumsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getOutputportsstrategyvaluesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = message.getInputlinkidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
  f = message.getTransportmode();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAgvcoordcode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAgvinterfacetype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional string modelNum = 1;
 * @return {string}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.getModelnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.setModelnum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 outputStrategy = 2;
 * @return {number}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.getOutputstrategy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.setOutputstrategy = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 outputLinkId = 3;
 * @return {number}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.getOutputlinkid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.setOutputlinkid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated string outputPortsModelNums = 4;
 * @return {!Array<string>}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.getOutputportsmodelnumsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.setOutputportsmodelnumsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.addOutputportsmodelnums = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.clearOutputportsmodelnumsList = function() {
  return this.setOutputportsmodelnumsList([]);
};


/**
 * repeated int32 outputPortsStrategyValues = 5;
 * @return {!Array<number>}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.getOutputportsstrategyvaluesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.setOutputportsstrategyvaluesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.addOutputportsstrategyvalues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.clearOutputportsstrategyvaluesList = function() {
  return this.setOutputportsstrategyvaluesList([]);
};


/**
 * repeated int32 inputLinkIds = 6;
 * @return {!Array<number>}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.getInputlinkidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.setInputlinkidsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.addInputlinkids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.clearInputlinkidsList = function() {
  return this.setInputlinkidsList([]);
};


/**
 * optional int32 transportMode = 7;
 * @return {number}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.getTransportmode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.setTransportmode = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string agvCoordCode = 8;
 * @return {string}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.getAgvcoordcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.setAgvcoordcode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 agvInterfaceType = 9;
 * @return {number}
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.getAgvinterfacetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo} returns this
 */
proto.greet.WorkFlowRequest.FlowNodeInfo.prototype.setAgvinterfacetype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.WorkFlowRequest.agvMapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.WorkFlowRequest.agvMapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.WorkFlowRequest.agvMapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    region: jspb.Message.getFieldWithDefault(msg, 2, ""),
    posx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    posy: jspb.Message.getFieldWithDefault(msg, 4, 0),
    directflag: jspb.Message.getFieldWithDefault(msg, 5, 0),
    note: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pointtype: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.WorkFlowRequest.agvMapInfo}
 */
proto.greet.WorkFlowRequest.agvMapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.WorkFlowRequest.agvMapInfo;
  return proto.greet.WorkFlowRequest.agvMapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.WorkFlowRequest.agvMapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.WorkFlowRequest.agvMapInfo}
 */
proto.greet.WorkFlowRequest.agvMapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPosx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPosy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDirectflag(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPointtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.WorkFlowRequest.agvMapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.WorkFlowRequest.agvMapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.WorkFlowRequest.agvMapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getDirectflag();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPointtype();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WorkFlowRequest.agvMapInfo} returns this
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string region = 2;
 * @return {string}
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WorkFlowRequest.agvMapInfo} returns this
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 posX = 3;
 * @return {number}
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.getPosx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WorkFlowRequest.agvMapInfo} returns this
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.setPosx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 posY = 4;
 * @return {number}
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.getPosy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WorkFlowRequest.agvMapInfo} returns this
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.setPosy = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 directFlag = 5;
 * @return {number}
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.getDirectflag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WorkFlowRequest.agvMapInfo} returns this
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.setDirectflag = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string note = 6;
 * @return {string}
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WorkFlowRequest.agvMapInfo} returns this
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 pointType = 7;
 * @return {number}
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.getPointtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.WorkFlowRequest.agvMapInfo} returns this
 */
proto.greet.WorkFlowRequest.agvMapInfo.prototype.setPointtype = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string workflowNum = 1;
 * @return {string}
 */
proto.greet.WorkFlowRequest.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.WorkFlowRequest} returns this
 */
proto.greet.WorkFlowRequest.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated modelProperty modelNode = 2;
 * @return {!Array<!proto.greet.WorkFlowRequest.modelProperty>}
 */
proto.greet.WorkFlowRequest.prototype.getModelnodeList = function() {
  return /** @type{!Array<!proto.greet.WorkFlowRequest.modelProperty>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.WorkFlowRequest.modelProperty, 2));
};


/**
 * @param {!Array<!proto.greet.WorkFlowRequest.modelProperty>} value
 * @return {!proto.greet.WorkFlowRequest} returns this
*/
proto.greet.WorkFlowRequest.prototype.setModelnodeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.greet.WorkFlowRequest.modelProperty=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.WorkFlowRequest.modelProperty}
 */
proto.greet.WorkFlowRequest.prototype.addModelnode = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.greet.WorkFlowRequest.modelProperty, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.WorkFlowRequest} returns this
 */
proto.greet.WorkFlowRequest.prototype.clearModelnodeList = function() {
  return this.setModelnodeList([]);
};


/**
 * repeated FlowNodeInfo flowNode = 3;
 * @return {!Array<!proto.greet.WorkFlowRequest.FlowNodeInfo>}
 */
proto.greet.WorkFlowRequest.prototype.getFlownodeList = function() {
  return /** @type{!Array<!proto.greet.WorkFlowRequest.FlowNodeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.WorkFlowRequest.FlowNodeInfo, 3));
};


/**
 * @param {!Array<!proto.greet.WorkFlowRequest.FlowNodeInfo>} value
 * @return {!proto.greet.WorkFlowRequest} returns this
*/
proto.greet.WorkFlowRequest.prototype.setFlownodeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.greet.WorkFlowRequest.FlowNodeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.WorkFlowRequest.FlowNodeInfo}
 */
proto.greet.WorkFlowRequest.prototype.addFlownode = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.greet.WorkFlowRequest.FlowNodeInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.WorkFlowRequest} returns this
 */
proto.greet.WorkFlowRequest.prototype.clearFlownodeList = function() {
  return this.setFlownodeList([]);
};


/**
 * repeated agvMapInfo agvMapNode = 4;
 * @return {!Array<!proto.greet.WorkFlowRequest.agvMapInfo>}
 */
proto.greet.WorkFlowRequest.prototype.getAgvmapnodeList = function() {
  return /** @type{!Array<!proto.greet.WorkFlowRequest.agvMapInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.WorkFlowRequest.agvMapInfo, 4));
};


/**
 * @param {!Array<!proto.greet.WorkFlowRequest.agvMapInfo>} value
 * @return {!proto.greet.WorkFlowRequest} returns this
*/
proto.greet.WorkFlowRequest.prototype.setAgvmapnodeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.greet.WorkFlowRequest.agvMapInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.WorkFlowRequest.agvMapInfo}
 */
proto.greet.WorkFlowRequest.prototype.addAgvmapnode = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.greet.WorkFlowRequest.agvMapInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.WorkFlowRequest} returns this
 */
proto.greet.WorkFlowRequest.prototype.clearAgvmapnodeList = function() {
  return this.setAgvmapnodeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.SimulationReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.SimulationReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.SimulationReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.SimulationReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    maxtakttime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxproductperday: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxpower: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reachmaxproducttime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    wipneedunitcountMap: (f = msg.getWipneedunitcountMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.SimulationReply}
 */
proto.greet.SimulationReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.SimulationReply;
  return proto.greet.SimulationReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.SimulationReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.SimulationReply}
 */
proto.greet.SimulationReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxtakttime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxproductperday(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxpower(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReachmaxproducttime(value);
      break;
    case 7:
      var value = msg.getWipneedunitcountMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.SimulationReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.SimulationReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.SimulationReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.SimulationReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaxtakttime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMaxproductperday();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMaxpower();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getReachmaxproducttime();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getWipneedunitcountMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.greet.SimulationReply.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.SimulationReply} returns this
 */
proto.greet.SimulationReply.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.greet.SimulationReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.SimulationReply} returns this
 */
proto.greet.SimulationReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 maxTaktTime = 3;
 * @return {number}
 */
proto.greet.SimulationReply.prototype.getMaxtakttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.SimulationReply} returns this
 */
proto.greet.SimulationReply.prototype.setMaxtakttime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 maxProductPerDay = 4;
 * @return {number}
 */
proto.greet.SimulationReply.prototype.getMaxproductperday = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.SimulationReply} returns this
 */
proto.greet.SimulationReply.prototype.setMaxproductperday = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 maxPower = 5;
 * @return {number}
 */
proto.greet.SimulationReply.prototype.getMaxpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.SimulationReply} returns this
 */
proto.greet.SimulationReply.prototype.setMaxpower = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 reachMaxProductTime = 6;
 * @return {number}
 */
proto.greet.SimulationReply.prototype.getReachmaxproducttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.SimulationReply} returns this
 */
proto.greet.SimulationReply.prototype.setReachmaxproducttime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * map<string, int32> wipNeedUnitCount = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.greet.SimulationReply.prototype.getWipneedunitcountMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.greet.SimulationReply} returns this
 */
proto.greet.SimulationReply.prototype.clearWipneedunitcountMap = function() {
  this.getWipneedunitcountMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.CountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.CountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.CountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflownum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    num: jspb.Message.getFieldWithDefault(msg, 2, ""),
    counttype: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.CountRequest}
 */
proto.greet.CountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.CountRequest;
  return proto.greet.CountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.CountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.CountRequest}
 */
proto.greet.CountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.CountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.CountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.CountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNum();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCounttype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string workflowNum = 1;
 * @return {string}
 */
proto.greet.CountRequest.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountRequest} returns this
 */
proto.greet.CountRequest.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string num = 2;
 * @return {string}
 */
proto.greet.CountRequest.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountRequest} returns this
 */
proto.greet.CountRequest.prototype.setNum = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string countType = 3;
 * @return {string}
 */
proto.greet.CountRequest.prototype.getCounttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountRequest} returns this
 */
proto.greet.CountRequest.prototype.setCounttype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.CountWarehouseReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.CountWarehouseReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.CountWarehouseReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.CountWarehouseReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountWarehouseReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.greet.CountWarehouseReply.warehouseInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.CountWarehouseReply}
 */
proto.greet.CountWarehouseReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.CountWarehouseReply;
  return proto.greet.CountWarehouseReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.CountWarehouseReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.CountWarehouseReply}
 */
proto.greet.CountWarehouseReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.greet.CountWarehouseReply.warehouseInfo;
      reader.readMessage(value,proto.greet.CountWarehouseReply.warehouseInfo.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.CountWarehouseReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.CountWarehouseReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.CountWarehouseReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountWarehouseReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.greet.CountWarehouseReply.warehouseInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.CountWarehouseReply.warehouseInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.CountWarehouseReply.warehouseInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountWarehouseReply.warehouseInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    totalcapacity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usedstorage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    vacancyrate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    inboundquantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    outboundquantity: jspb.Message.getFieldWithDefault(msg, 6, 0),
    averageresidencetime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    availability: jspb.Message.getFieldWithDefault(msg, 8, 0),
    powercount: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo}
 */
proto.greet.CountWarehouseReply.warehouseInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.CountWarehouseReply.warehouseInfo;
  return proto.greet.CountWarehouseReply.warehouseInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.CountWarehouseReply.warehouseInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo}
 */
proto.greet.CountWarehouseReply.warehouseInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalcapacity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUsedstorage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVacancyrate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInboundquantity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutboundquantity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAverageresidencetime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvailability(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPowercount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.CountWarehouseReply.warehouseInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.CountWarehouseReply.warehouseInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountWarehouseReply.warehouseInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotalcapacity();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUsedstorage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getVacancyrate();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getInboundquantity();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getOutboundquantity();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAverageresidencetime();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAvailability();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getPowercount();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo} returns this
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 totalCapacity = 2;
 * @return {number}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.getTotalcapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo} returns this
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.setTotalcapacity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 usedStorage = 3;
 * @return {number}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.getUsedstorage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo} returns this
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.setUsedstorage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 vacancyRate = 4;
 * @return {number}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.getVacancyrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo} returns this
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.setVacancyrate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 inboundQuantity = 5;
 * @return {number}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.getInboundquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo} returns this
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.setInboundquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 outboundQuantity = 6;
 * @return {number}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.getOutboundquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo} returns this
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.setOutboundquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 averageResidenceTime = 7;
 * @return {number}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.getAverageresidencetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo} returns this
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.setAverageresidencetime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 availability = 8;
 * @return {number}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.getAvailability = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo} returns this
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.setAvailability = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 powerCount = 9;
 * @return {number}
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.getPowercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo} returns this
 */
proto.greet.CountWarehouseReply.warehouseInfo.prototype.setPowercount = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.greet.CountWarehouseReply.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountWarehouseReply} returns this
 */
proto.greet.CountWarehouseReply.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.greet.CountWarehouseReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountWarehouseReply} returns this
 */
proto.greet.CountWarehouseReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated warehouseInfo results = 3;
 * @return {!Array<!proto.greet.CountWarehouseReply.warehouseInfo>}
 */
proto.greet.CountWarehouseReply.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.greet.CountWarehouseReply.warehouseInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.CountWarehouseReply.warehouseInfo, 3));
};


/**
 * @param {!Array<!proto.greet.CountWarehouseReply.warehouseInfo>} value
 * @return {!proto.greet.CountWarehouseReply} returns this
*/
proto.greet.CountWarehouseReply.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.greet.CountWarehouseReply.warehouseInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.CountWarehouseReply.warehouseInfo}
 */
proto.greet.CountWarehouseReply.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.greet.CountWarehouseReply.warehouseInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.CountWarehouseReply} returns this
 */
proto.greet.CountWarehouseReply.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.CountEquipmentReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.CountEquipmentReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.CountEquipmentReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.CountEquipmentReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountEquipmentReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.greet.CountEquipmentReply.equipmentInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.CountEquipmentReply}
 */
proto.greet.CountEquipmentReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.CountEquipmentReply;
  return proto.greet.CountEquipmentReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.CountEquipmentReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.CountEquipmentReply}
 */
proto.greet.CountEquipmentReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.greet.CountEquipmentReply.equipmentInfo;
      reader.readMessage(value,proto.greet.CountEquipmentReply.equipmentInfo.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.CountEquipmentReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.CountEquipmentReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.CountEquipmentReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountEquipmentReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.greet.CountEquipmentReply.equipmentInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.CountEquipmentReply.equipmentInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.CountEquipmentReply.equipmentInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountEquipmentReply.equipmentInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    materialquantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    scrapmaterialquantity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    yieldrate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    availability: jspb.Message.getFieldWithDefault(msg, 5, 0),
    failurerate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    powercount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    averagepowerhourly: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo}
 */
proto.greet.CountEquipmentReply.equipmentInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.CountEquipmentReply.equipmentInfo;
  return proto.greet.CountEquipmentReply.equipmentInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.CountEquipmentReply.equipmentInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo}
 */
proto.greet.CountEquipmentReply.equipmentInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaterialquantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScrapmaterialquantity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYieldrate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvailability(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFailurerate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPowercount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAveragepowerhourly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.CountEquipmentReply.equipmentInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.CountEquipmentReply.equipmentInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountEquipmentReply.equipmentInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaterialquantity();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getScrapmaterialquantity();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getYieldrate();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAvailability();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFailurerate();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPowercount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAveragepowerhourly();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo} returns this
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 materialQuantity = 2;
 * @return {number}
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.getMaterialquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo} returns this
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.setMaterialquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 scrapMaterialQuantity = 3;
 * @return {number}
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.getScrapmaterialquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo} returns this
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.setScrapmaterialquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 yieldRate = 4;
 * @return {number}
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.getYieldrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo} returns this
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.setYieldrate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 availability = 5;
 * @return {number}
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.getAvailability = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo} returns this
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.setAvailability = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 failureRate = 6;
 * @return {number}
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.getFailurerate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo} returns this
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.setFailurerate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 powerCount = 7;
 * @return {number}
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.getPowercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo} returns this
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.setPowercount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 averagePowerHourly = 8;
 * @return {number}
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.getAveragepowerhourly = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo} returns this
 */
proto.greet.CountEquipmentReply.equipmentInfo.prototype.setAveragepowerhourly = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.greet.CountEquipmentReply.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountEquipmentReply} returns this
 */
proto.greet.CountEquipmentReply.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.greet.CountEquipmentReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountEquipmentReply} returns this
 */
proto.greet.CountEquipmentReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated equipmentInfo results = 3;
 * @return {!Array<!proto.greet.CountEquipmentReply.equipmentInfo>}
 */
proto.greet.CountEquipmentReply.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.greet.CountEquipmentReply.equipmentInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.CountEquipmentReply.equipmentInfo, 3));
};


/**
 * @param {!Array<!proto.greet.CountEquipmentReply.equipmentInfo>} value
 * @return {!proto.greet.CountEquipmentReply} returns this
*/
proto.greet.CountEquipmentReply.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.greet.CountEquipmentReply.equipmentInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.CountEquipmentReply.equipmentInfo}
 */
proto.greet.CountEquipmentReply.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.greet.CountEquipmentReply.equipmentInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.CountEquipmentReply} returns this
 */
proto.greet.CountEquipmentReply.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.CountConveyorReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.CountConveyorReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.CountConveyorReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountConveyorReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    materialquantity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    availability: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.CountConveyorReply}
 */
proto.greet.CountConveyorReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.CountConveyorReply;
  return proto.greet.CountConveyorReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.CountConveyorReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.CountConveyorReply}
 */
proto.greet.CountConveyorReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaterialquantity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvailability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.CountConveyorReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.CountConveyorReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.CountConveyorReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountConveyorReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMaterialquantity();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAvailability();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.greet.CountConveyorReply.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountConveyorReply} returns this
 */
proto.greet.CountConveyorReply.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.greet.CountConveyorReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountConveyorReply} returns this
 */
proto.greet.CountConveyorReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.greet.CountConveyorReply.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountConveyorReply} returns this
 */
proto.greet.CountConveyorReply.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 materialQuantity = 4;
 * @return {number}
 */
proto.greet.CountConveyorReply.prototype.getMaterialquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountConveyorReply} returns this
 */
proto.greet.CountConveyorReply.prototype.setMaterialquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 availability = 5;
 * @return {number}
 */
proto.greet.CountConveyorReply.prototype.getAvailability = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountConveyorReply} returns this
 */
proto.greet.CountConveyorReply.prototype.setAvailability = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.CountProductionLineReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.CountProductionLineReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.CountProductionLineReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountProductionLineReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inboundquantity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    outboundquantity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    prodlinetotal: jspb.Message.getFieldWithDefault(msg, 5, 0),
    availability: jspb.Message.getFieldWithDefault(msg, 6, 0),
    yieldrate: jspb.Message.getFieldWithDefault(msg, 7, 0),
    vacancyrate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    powercount: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.CountProductionLineReply}
 */
proto.greet.CountProductionLineReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.CountProductionLineReply;
  return proto.greet.CountProductionLineReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.CountProductionLineReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.CountProductionLineReply}
 */
proto.greet.CountProductionLineReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInboundquantity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutboundquantity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProdlinetotal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvailability(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYieldrate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVacancyrate(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPowercount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.CountProductionLineReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.CountProductionLineReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.CountProductionLineReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountProductionLineReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInboundquantity();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOutboundquantity();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getProdlinetotal();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAvailability();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getYieldrate();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getVacancyrate();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getPowercount();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.greet.CountProductionLineReply.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountProductionLineReply} returns this
 */
proto.greet.CountProductionLineReply.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.greet.CountProductionLineReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountProductionLineReply} returns this
 */
proto.greet.CountProductionLineReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 inboundQuantity = 3;
 * @return {number}
 */
proto.greet.CountProductionLineReply.prototype.getInboundquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountProductionLineReply} returns this
 */
proto.greet.CountProductionLineReply.prototype.setInboundquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 outboundQuantity = 4;
 * @return {number}
 */
proto.greet.CountProductionLineReply.prototype.getOutboundquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountProductionLineReply} returns this
 */
proto.greet.CountProductionLineReply.prototype.setOutboundquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 prodLineTotal = 5;
 * @return {number}
 */
proto.greet.CountProductionLineReply.prototype.getProdlinetotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountProductionLineReply} returns this
 */
proto.greet.CountProductionLineReply.prototype.setProdlinetotal = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 availability = 6;
 * @return {number}
 */
proto.greet.CountProductionLineReply.prototype.getAvailability = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountProductionLineReply} returns this
 */
proto.greet.CountProductionLineReply.prototype.setAvailability = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 yieldRate = 7;
 * @return {number}
 */
proto.greet.CountProductionLineReply.prototype.getYieldrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountProductionLineReply} returns this
 */
proto.greet.CountProductionLineReply.prototype.setYieldrate = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 vacancyRate = 8;
 * @return {number}
 */
proto.greet.CountProductionLineReply.prototype.getVacancyrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountProductionLineReply} returns this
 */
proto.greet.CountProductionLineReply.prototype.setVacancyrate = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 powerCount = 9;
 * @return {number}
 */
proto.greet.CountProductionLineReply.prototype.getPowercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountProductionLineReply} returns this
 */
proto.greet.CountProductionLineReply.prototype.setPowercount = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.CountAgvReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.CountAgvReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.CountAgvReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.CountAgvReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountAgvReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.greet.CountAgvReply.agvInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.CountAgvReply}
 */
proto.greet.CountAgvReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.CountAgvReply;
  return proto.greet.CountAgvReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.CountAgvReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.CountAgvReply}
 */
proto.greet.CountAgvReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.greet.CountAgvReply.agvInfo;
      reader.readMessage(value,proto.greet.CountAgvReply.agvInfo.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.CountAgvReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.CountAgvReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.CountAgvReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountAgvReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.greet.CountAgvReply.agvInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.CountAgvReply.agvInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.CountAgvReply.agvInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.CountAgvReply.agvInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountAgvReply.agvInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    agvname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    availability: jspb.Message.getFieldWithDefault(msg, 2, 0),
    loadrate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    goalname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    taskflow: jspb.Message.getFieldWithDefault(msg, 5, 0),
    agvstate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    batterylevel: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.CountAgvReply.agvInfo}
 */
proto.greet.CountAgvReply.agvInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.CountAgvReply.agvInfo;
  return proto.greet.CountAgvReply.agvInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.CountAgvReply.agvInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.CountAgvReply.agvInfo}
 */
proto.greet.CountAgvReply.agvInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgvname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvailability(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLoadrate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoalname(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaskflow(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAgvstate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatterylevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.CountAgvReply.agvInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.CountAgvReply.agvInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.CountAgvReply.agvInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.CountAgvReply.agvInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgvname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAvailability();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLoadrate();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getGoalname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTaskflow();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAgvstate();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getBatterylevel();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string agvName = 1;
 * @return {string}
 */
proto.greet.CountAgvReply.agvInfo.prototype.getAgvname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountAgvReply.agvInfo} returns this
 */
proto.greet.CountAgvReply.agvInfo.prototype.setAgvname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 availability = 2;
 * @return {number}
 */
proto.greet.CountAgvReply.agvInfo.prototype.getAvailability = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountAgvReply.agvInfo} returns this
 */
proto.greet.CountAgvReply.agvInfo.prototype.setAvailability = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 loadRate = 3;
 * @return {number}
 */
proto.greet.CountAgvReply.agvInfo.prototype.getLoadrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountAgvReply.agvInfo} returns this
 */
proto.greet.CountAgvReply.agvInfo.prototype.setLoadrate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string goalName = 4;
 * @return {string}
 */
proto.greet.CountAgvReply.agvInfo.prototype.getGoalname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountAgvReply.agvInfo} returns this
 */
proto.greet.CountAgvReply.agvInfo.prototype.setGoalname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 taskFlow = 5;
 * @return {number}
 */
proto.greet.CountAgvReply.agvInfo.prototype.getTaskflow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountAgvReply.agvInfo} returns this
 */
proto.greet.CountAgvReply.agvInfo.prototype.setTaskflow = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 agvState = 6;
 * @return {number}
 */
proto.greet.CountAgvReply.agvInfo.prototype.getAgvstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountAgvReply.agvInfo} returns this
 */
proto.greet.CountAgvReply.agvInfo.prototype.setAgvstate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 batteryLevel = 7;
 * @return {number}
 */
proto.greet.CountAgvReply.agvInfo.prototype.getBatterylevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountAgvReply.agvInfo} returns this
 */
proto.greet.CountAgvReply.agvInfo.prototype.setBatterylevel = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.greet.CountAgvReply.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.CountAgvReply} returns this
 */
proto.greet.CountAgvReply.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.greet.CountAgvReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.CountAgvReply} returns this
 */
proto.greet.CountAgvReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated agvInfo results = 3;
 * @return {!Array<!proto.greet.CountAgvReply.agvInfo>}
 */
proto.greet.CountAgvReply.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.greet.CountAgvReply.agvInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.CountAgvReply.agvInfo, 3));
};


/**
 * @param {!Array<!proto.greet.CountAgvReply.agvInfo>} value
 * @return {!proto.greet.CountAgvReply} returns this
*/
proto.greet.CountAgvReply.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.greet.CountAgvReply.agvInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.CountAgvReply.agvInfo}
 */
proto.greet.CountAgvReply.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.greet.CountAgvReply.agvInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.CountAgvReply} returns this
 */
proto.greet.CountAgvReply.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.MockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.MockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.MockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflownum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mocktype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mockstate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    takttime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    speedfactor: jspb.Message.getFieldWithDefault(msg, 5, 0),
    initialwarmup: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.MockRequest}
 */
proto.greet.MockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.MockRequest;
  return proto.greet.MockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.MockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.MockRequest}
 */
proto.greet.MockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMocktype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMockstate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTakttime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpeedfactor(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInitialwarmup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.MockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.MockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.MockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMocktype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMockstate();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTakttime();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSpeedfactor();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getInitialwarmup();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string workflowNum = 1;
 * @return {string}
 */
proto.greet.MockRequest.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockRequest} returns this
 */
proto.greet.MockRequest.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 mockType = 2;
 * @return {number}
 */
proto.greet.MockRequest.prototype.getMocktype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockRequest} returns this
 */
proto.greet.MockRequest.prototype.setMocktype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 mockState = 3;
 * @return {number}
 */
proto.greet.MockRequest.prototype.getMockstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockRequest} returns this
 */
proto.greet.MockRequest.prototype.setMockstate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 taktTime = 4;
 * @return {number}
 */
proto.greet.MockRequest.prototype.getTakttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockRequest} returns this
 */
proto.greet.MockRequest.prototype.setTakttime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 speedfactor = 5;
 * @return {number}
 */
proto.greet.MockRequest.prototype.getSpeedfactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockRequest} returns this
 */
proto.greet.MockRequest.prototype.setSpeedfactor = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool initialWarmup = 6;
 * @return {boolean}
 */
proto.greet.MockRequest.prototype.getInitialwarmup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.greet.MockRequest} returns this
 */
proto.greet.MockRequest.prototype.setInitialwarmup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.MockReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.MockReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.MockReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    workflownum: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mockstate: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.MockReply}
 */
proto.greet.MockReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.MockReply;
  return proto.greet.MockReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.MockReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.MockReply}
 */
proto.greet.MockReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMockstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.MockReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.MockReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.MockReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMockstate();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.greet.MockReply.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockReply} returns this
 */
proto.greet.MockReply.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.greet.MockReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockReply} returns this
 */
proto.greet.MockReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string workflowNum = 3;
 * @return {string}
 */
proto.greet.MockReply.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockReply} returns this
 */
proto.greet.MockReply.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 mockState = 4;
 * @return {number}
 */
proto.greet.MockReply.prototype.getMockstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockReply} returns this
 */
proto.greet.MockReply.prototype.setMockstate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.MockStateInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.MockStateInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.MockStateInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockStateInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflownum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mocktype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.MockStateInfoRequest}
 */
proto.greet.MockStateInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.MockStateInfoRequest;
  return proto.greet.MockStateInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.MockStateInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.MockStateInfoRequest}
 */
proto.greet.MockStateInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMocktype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.MockStateInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.MockStateInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.MockStateInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockStateInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMocktype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string workflowNum = 1;
 * @return {string}
 */
proto.greet.MockStateInfoRequest.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoRequest} returns this
 */
proto.greet.MockStateInfoRequest.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 mockType = 2;
 * @return {number}
 */
proto.greet.MockStateInfoRequest.prototype.getMocktype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoRequest} returns this
 */
proto.greet.MockStateInfoRequest.prototype.setMocktype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.MockStateInfoReply.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.MockStateInfoReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.MockStateInfoReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.MockStateInfoReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockStateInfoReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    workflownum: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mockstate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.greet.MockStateInfoReply.MockGoodsInfo.toObject, includeInstance),
    agvresultsList: jspb.Message.toObjectList(msg.getAgvresultsList(),
    proto.greet.MockStateInfoReply.AgvInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.MockStateInfoReply}
 */
proto.greet.MockStateInfoReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.MockStateInfoReply;
  return proto.greet.MockStateInfoReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.MockStateInfoReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.MockStateInfoReply}
 */
proto.greet.MockStateInfoReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflownum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMockstate(value);
      break;
    case 5:
      var value = new proto.greet.MockStateInfoReply.MockGoodsInfo;
      reader.readMessage(value,proto.greet.MockStateInfoReply.MockGoodsInfo.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 6:
      var value = new proto.greet.MockStateInfoReply.AgvInfo;
      reader.readMessage(value,proto.greet.MockStateInfoReply.AgvInfo.deserializeBinaryFromReader);
      msg.addAgvresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.MockStateInfoReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.MockStateInfoReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.MockStateInfoReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockStateInfoReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWorkflownum();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMockstate();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.greet.MockStateInfoReply.MockGoodsInfo.serializeBinaryToWriter
    );
  }
  f = message.getAgvresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.greet.MockStateInfoReply.AgvInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.MockStateInfoReply.MockGoodsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.MockStateInfoReply.MockGoodsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    goodsnum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    goodsstate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    materialcount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    equipmentnum: jspb.Message.getFieldWithDefault(msg, 4, ""),
    intime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    outtime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    equipmentstate: jspb.Message.getFieldWithDefault(msg, 7, 0),
    euqipmentcycletime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    goodstype: jspb.Message.getFieldWithDefault(msg, 9, 0),
    flowstate: jspb.Message.getFieldWithDefault(msg, 10, 0),
    materialnumstr: jspb.Message.getFieldWithDefault(msg, 11, ""),
    warehouselocation: jspb.Message.getFieldWithDefault(msg, 12, ""),
    goodsrunningstatus: jspb.Message.getFieldWithDefault(msg, 13, 0),
    nextequipmentnum: jspb.Message.getFieldWithDefault(msg, 14, ""),
    rgvloadtime: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.MockStateInfoReply.MockGoodsInfo;
  return proto.greet.MockStateInfoReply.MockGoodsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.MockStateInfoReply.MockGoodsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoodsnum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoodsstate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaterialcount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEquipmentnum(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOuttime(value);
      break;
    case 7:
      var value = /** @type {!proto.greet.ModelState} */ (reader.readEnum());
      msg.setEquipmentstate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEuqipmentcycletime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGoodstype(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlowstate(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaterialnumstr(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setWarehouselocation(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGoodsrunningstatus(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextequipmentnum(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setRgvloadtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.MockStateInfoReply.MockGoodsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.MockStateInfoReply.MockGoodsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoodsnum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGoodsstate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaterialcount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEquipmentnum();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIntime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getOuttime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getEquipmentstate();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getEuqipmentcycletime();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getGoodstype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getFlowstate();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getMaterialnumstr();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getWarehouselocation();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getGoodsrunningstatus();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getNextequipmentnum();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getRgvloadtime();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string goodsNum = 1;
 * @return {string}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getGoodsnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setGoodsnum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string goodsState = 2;
 * @return {string}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getGoodsstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setGoodsstate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 materialCount = 3;
 * @return {number}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getMaterialcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setMaterialcount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string equipmentNum = 4;
 * @return {string}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getEquipmentnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setEquipmentnum = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 inTime = 5;
 * @return {number}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getIntime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setIntime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 outTime = 6;
 * @return {number}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getOuttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setOuttime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional ModelState equipmentState = 7;
 * @return {!proto.greet.ModelState}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getEquipmentstate = function() {
  return /** @type {!proto.greet.ModelState} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.greet.ModelState} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setEquipmentstate = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional int32 euqipmentCycleTime = 8;
 * @return {number}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getEuqipmentcycletime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setEuqipmentcycletime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 goodsType = 9;
 * @return {number}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getGoodstype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setGoodstype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 flowState = 10;
 * @return {number}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getFlowstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setFlowstate = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string materialNumStr = 11;
 * @return {string}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getMaterialnumstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setMaterialnumstr = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string warehouseLocation = 12;
 * @return {string}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getWarehouselocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setWarehouselocation = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional int32 goodsRunningStatus = 13;
 * @return {number}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getGoodsrunningstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setGoodsrunningstatus = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string nextEquipmentNum = 14;
 * @return {string}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getNextequipmentnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setNextequipmentnum = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string rgvLoadTime = 15;
 * @return {string}
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.getRgvloadtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo} returns this
 */
proto.greet.MockStateInfoReply.MockGoodsInfo.prototype.setRgvloadtime = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.MockStateInfoReply.AgvInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.MockStateInfoReply.AgvInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockStateInfoReply.AgvInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    agvnum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currentcode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    currentx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    currenty: jspb.Message.getFieldWithDefault(msg, 4, 0),
    agvstate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    direct: jspb.Message.getFieldWithDefault(msg, 6, 0),
    hascargo: jspb.Message.getFieldWithDefault(msg, 7, 0),
    actiontype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    region: jspb.Message.getFieldWithDefault(msg, 9, ""),
    goodsnum: jspb.Message.getFieldWithDefault(msg, 10, ""),
    intime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    parksonequiment: jspb.Message.getFieldWithDefault(msg, 12, ""),
    posx: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    posy: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    yaw: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    battery: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    forkheight: jspb.Message.getFieldWithDefault(msg, 17, 0),
    goodstypestr: jspb.Message.getFieldWithDefault(msg, 18, ""),
    agvstatestr: jspb.Message.getFieldWithDefault(msg, 19, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.MockStateInfoReply.AgvInfo}
 */
proto.greet.MockStateInfoReply.AgvInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.MockStateInfoReply.AgvInfo;
  return proto.greet.MockStateInfoReply.AgvInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.MockStateInfoReply.AgvInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.MockStateInfoReply.AgvInfo}
 */
proto.greet.MockStateInfoReply.AgvInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgvnum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentcode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrenty(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAgvstate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDirect(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHascargo(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiontype(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoodsnum(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntime(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setParksonequiment(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPosx(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPosy(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYaw(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBattery(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setForkheight(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoodstypestr(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgvstatestr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.MockStateInfoReply.AgvInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.MockStateInfoReply.AgvInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.MockStateInfoReply.AgvInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgvnum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrentcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCurrentx();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCurrenty();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAgvstate();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDirect();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getHascargo();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getActiontype();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getGoodsnum();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIntime();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getParksonequiment();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getYaw();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getBattery();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getForkheight();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getGoodstypestr();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getAgvstatestr();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
};


/**
 * optional string agvNum = 1;
 * @return {string}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getAgvnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setAgvnum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string currentCode = 2;
 * @return {string}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getCurrentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setCurrentcode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 currentX = 3;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getCurrentx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setCurrentx = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 currentY = 4;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getCurrenty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setCurrenty = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 agvState = 5;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getAgvstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setAgvstate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 direct = 6;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getDirect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setDirect = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 hasCargo = 7;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getHascargo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setHascargo = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 actionType = 8;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getActiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setActiontype = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string region = 9;
 * @return {string}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string goodsNum = 10;
 * @return {string}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getGoodsnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setGoodsnum = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 inTime = 11;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getIntime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setIntime = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string parksOnEquiment = 12;
 * @return {string}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getParksonequiment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setParksonequiment = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional double posX = 13;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getPosx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setPosx = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double posY = 14;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getPosy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setPosy = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double yaw = 15;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getYaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setYaw = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double battery = 16;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getBattery = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setBattery = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional int32 forkHeight = 17;
 * @return {number}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getForkheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setForkheight = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string goodsTypeStr = 18;
 * @return {string}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getGoodstypestr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setGoodstypestr = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string agvStateStr = 19;
 * @return {string}
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.getAgvstatestr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply.AgvInfo} returns this
 */
proto.greet.MockStateInfoReply.AgvInfo.prototype.setAgvstatestr = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional int32 statusCode = 1;
 * @return {number}
 */
proto.greet.MockStateInfoReply.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply} returns this
 */
proto.greet.MockStateInfoReply.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.greet.MockStateInfoReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply} returns this
 */
proto.greet.MockStateInfoReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string workflowNum = 3;
 * @return {string}
 */
proto.greet.MockStateInfoReply.prototype.getWorkflownum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.MockStateInfoReply} returns this
 */
proto.greet.MockStateInfoReply.prototype.setWorkflownum = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 mockState = 4;
 * @return {number}
 */
proto.greet.MockStateInfoReply.prototype.getMockstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.MockStateInfoReply} returns this
 */
proto.greet.MockStateInfoReply.prototype.setMockstate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated MockGoodsInfo results = 5;
 * @return {!Array<!proto.greet.MockStateInfoReply.MockGoodsInfo>}
 */
proto.greet.MockStateInfoReply.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.greet.MockStateInfoReply.MockGoodsInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.MockStateInfoReply.MockGoodsInfo, 5));
};


/**
 * @param {!Array<!proto.greet.MockStateInfoReply.MockGoodsInfo>} value
 * @return {!proto.greet.MockStateInfoReply} returns this
*/
proto.greet.MockStateInfoReply.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.greet.MockStateInfoReply.MockGoodsInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.MockStateInfoReply.MockGoodsInfo}
 */
proto.greet.MockStateInfoReply.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.greet.MockStateInfoReply.MockGoodsInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.MockStateInfoReply} returns this
 */
proto.greet.MockStateInfoReply.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * repeated AgvInfo agvResults = 6;
 * @return {!Array<!proto.greet.MockStateInfoReply.AgvInfo>}
 */
proto.greet.MockStateInfoReply.prototype.getAgvresultsList = function() {
  return /** @type{!Array<!proto.greet.MockStateInfoReply.AgvInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.MockStateInfoReply.AgvInfo, 6));
};


/**
 * @param {!Array<!proto.greet.MockStateInfoReply.AgvInfo>} value
 * @return {!proto.greet.MockStateInfoReply} returns this
*/
proto.greet.MockStateInfoReply.prototype.setAgvresultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.greet.MockStateInfoReply.AgvInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.MockStateInfoReply.AgvInfo}
 */
proto.greet.MockStateInfoReply.prototype.addAgvresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.greet.MockStateInfoReply.AgvInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.MockStateInfoReply} returns this
 */
proto.greet.MockStateInfoReply.prototype.clearAgvresultsList = function() {
  return this.setAgvresultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.TwinsWarehouseBayStatusReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.TwinsWarehouseBayStatusReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.TwinsWarehouseBayStatusReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.TwinsWarehouseBayStatusReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsWarehouseBayStatusReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    warehousebaystatusresultsList: jspb.Message.toObjectList(msg.getWarehousebaystatusresultsList(),
    proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.TwinsWarehouseBayStatusReply}
 */
proto.greet.TwinsWarehouseBayStatusReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.TwinsWarehouseBayStatusReply;
  return proto.greet.TwinsWarehouseBayStatusReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.TwinsWarehouseBayStatusReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.TwinsWarehouseBayStatusReply}
 */
proto.greet.TwinsWarehouseBayStatusReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus;
      reader.readMessage(value,proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.deserializeBinaryFromReader);
      msg.addWarehousebaystatusresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.TwinsWarehouseBayStatusReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.TwinsWarehouseBayStatusReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.TwinsWarehouseBayStatusReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsWarehouseBayStatusReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWarehousebaystatusresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    bayid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    materialtype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    materialname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    occupied: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus}
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus;
  return proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus}
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBayid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaterialtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaterialname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantity(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOccupied(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBayid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaterialtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaterialname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOccupied();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string bayId = 1;
 * @return {string}
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.getBayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus} returns this
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.setBayid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string materialType = 2;
 * @return {string}
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.getMaterialtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus} returns this
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.setMaterialtype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string materialName = 3;
 * @return {string}
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.getMaterialname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus} returns this
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.setMaterialname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 quantity = 4;
 * @return {number}
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus} returns this
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool occupied = 5;
 * @return {boolean}
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.getOccupied = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus} returns this
 */
proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus.prototype.setOccupied = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * repeated WarehouseBayStatus warehouseBayStatusResults = 1;
 * @return {!Array<!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus>}
 */
proto.greet.TwinsWarehouseBayStatusReply.prototype.getWarehousebaystatusresultsList = function() {
  return /** @type{!Array<!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus, 1));
};


/**
 * @param {!Array<!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus>} value
 * @return {!proto.greet.TwinsWarehouseBayStatusReply} returns this
*/
proto.greet.TwinsWarehouseBayStatusReply.prototype.setWarehousebaystatusresultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus}
 */
proto.greet.TwinsWarehouseBayStatusReply.prototype.addWarehousebaystatusresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greet.TwinsWarehouseBayStatusReply.WarehouseBayStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.TwinsWarehouseBayStatusReply} returns this
 */
proto.greet.TwinsWarehouseBayStatusReply.prototype.clearWarehousebaystatusresultsList = function() {
  return this.setWarehousebaystatusresultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.TwinsAgvTaskCountReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.TwinsAgvTaskCountReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.TwinsAgvTaskCountReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.TwinsAgvTaskCountReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsAgvTaskCountReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    agvtaskresultsList: jspb.Message.toObjectList(msg.getAgvtaskresultsList(),
    proto.greet.TwinsAgvTaskCountReply.AgvTask.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.TwinsAgvTaskCountReply}
 */
proto.greet.TwinsAgvTaskCountReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.TwinsAgvTaskCountReply;
  return proto.greet.TwinsAgvTaskCountReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.TwinsAgvTaskCountReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.TwinsAgvTaskCountReply}
 */
proto.greet.TwinsAgvTaskCountReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greet.TwinsAgvTaskCountReply.AgvTask;
      reader.readMessage(value,proto.greet.TwinsAgvTaskCountReply.AgvTask.deserializeBinaryFromReader);
      msg.addAgvtaskresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.TwinsAgvTaskCountReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.TwinsAgvTaskCountReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.TwinsAgvTaskCountReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsAgvTaskCountReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgvtaskresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greet.TwinsAgvTaskCountReply.AgvTask.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.TwinsAgvTaskCountReply.AgvTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.TwinsAgvTaskCountReply.AgvTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    agvnum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    taskcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    avgtime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    alarmtaskcount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.TwinsAgvTaskCountReply.AgvTask}
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.TwinsAgvTaskCountReply.AgvTask;
  return proto.greet.TwinsAgvTaskCountReply.AgvTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.TwinsAgvTaskCountReply.AgvTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.TwinsAgvTaskCountReply.AgvTask}
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgvnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaskcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvgtime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAlarmtaskcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.TwinsAgvTaskCountReply.AgvTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.TwinsAgvTaskCountReply.AgvTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgvnum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTaskcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAvgtime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAlarmtaskcount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string agvNum = 1;
 * @return {string}
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.prototype.getAgvnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.TwinsAgvTaskCountReply.AgvTask} returns this
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.prototype.setAgvnum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 taskCount = 2;
 * @return {number}
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.prototype.getTaskcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsAgvTaskCountReply.AgvTask} returns this
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.prototype.setTaskcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 avgTime = 3;
 * @return {number}
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.prototype.getAvgtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsAgvTaskCountReply.AgvTask} returns this
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.prototype.setAvgtime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 alarmTaskCount = 4;
 * @return {number}
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.prototype.getAlarmtaskcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsAgvTaskCountReply.AgvTask} returns this
 */
proto.greet.TwinsAgvTaskCountReply.AgvTask.prototype.setAlarmtaskcount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated AgvTask agvTaskResults = 1;
 * @return {!Array<!proto.greet.TwinsAgvTaskCountReply.AgvTask>}
 */
proto.greet.TwinsAgvTaskCountReply.prototype.getAgvtaskresultsList = function() {
  return /** @type{!Array<!proto.greet.TwinsAgvTaskCountReply.AgvTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.TwinsAgvTaskCountReply.AgvTask, 1));
};


/**
 * @param {!Array<!proto.greet.TwinsAgvTaskCountReply.AgvTask>} value
 * @return {!proto.greet.TwinsAgvTaskCountReply} returns this
*/
proto.greet.TwinsAgvTaskCountReply.prototype.setAgvtaskresultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greet.TwinsAgvTaskCountReply.AgvTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.TwinsAgvTaskCountReply.AgvTask}
 */
proto.greet.TwinsAgvTaskCountReply.prototype.addAgvtaskresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greet.TwinsAgvTaskCountReply.AgvTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.TwinsAgvTaskCountReply} returns this
 */
proto.greet.TwinsAgvTaskCountReply.prototype.clearAgvtaskresultsList = function() {
  return this.setAgvtaskresultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.TwinsWarehouseCountReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.TwinsWarehouseCountReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.TwinsWarehouseCountReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.TwinsWarehouseCountReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsWarehouseCountReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    waretraystatusresultsList: jspb.Message.toObjectList(msg.getWaretraystatusresultsList(),
    proto.greet.TwinsWarehouseCountReply.WareTrayStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.TwinsWarehouseCountReply}
 */
proto.greet.TwinsWarehouseCountReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.TwinsWarehouseCountReply;
  return proto.greet.TwinsWarehouseCountReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.TwinsWarehouseCountReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.TwinsWarehouseCountReply}
 */
proto.greet.TwinsWarehouseCountReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greet.TwinsWarehouseCountReply.WareTrayStatus;
      reader.readMessage(value,proto.greet.TwinsWarehouseCountReply.WareTrayStatus.deserializeBinaryFromReader);
      msg.addWaretraystatusresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.TwinsWarehouseCountReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.TwinsWarehouseCountReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.TwinsWarehouseCountReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsWarehouseCountReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaretraystatusresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greet.TwinsWarehouseCountReply.WareTrayStatus.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.TwinsWarehouseCountReply.WareTrayStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    warehouseid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    occupiedcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    freecount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalcount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus}
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.TwinsWarehouseCountReply.WareTrayStatus;
  return proto.greet.TwinsWarehouseCountReply.WareTrayStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus}
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWarehouseid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOccupiedcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreecount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.TwinsWarehouseCountReply.WareTrayStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWarehouseid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOccupiedcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFreecount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTotalcount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string warehouseId = 1;
 * @return {string}
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.prototype.getWarehouseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus} returns this
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.prototype.setWarehouseid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 occupiedCount = 2;
 * @return {number}
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.prototype.getOccupiedcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus} returns this
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.prototype.setOccupiedcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 freeCount = 3;
 * @return {number}
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.prototype.getFreecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus} returns this
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.prototype.setFreecount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 totalCount = 4;
 * @return {number}
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.prototype.getTotalcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus} returns this
 */
proto.greet.TwinsWarehouseCountReply.WareTrayStatus.prototype.setTotalcount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated WareTrayStatus wareTrayStatusResults = 1;
 * @return {!Array<!proto.greet.TwinsWarehouseCountReply.WareTrayStatus>}
 */
proto.greet.TwinsWarehouseCountReply.prototype.getWaretraystatusresultsList = function() {
  return /** @type{!Array<!proto.greet.TwinsWarehouseCountReply.WareTrayStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.TwinsWarehouseCountReply.WareTrayStatus, 1));
};


/**
 * @param {!Array<!proto.greet.TwinsWarehouseCountReply.WareTrayStatus>} value
 * @return {!proto.greet.TwinsWarehouseCountReply} returns this
*/
proto.greet.TwinsWarehouseCountReply.prototype.setWaretraystatusresultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.TwinsWarehouseCountReply.WareTrayStatus}
 */
proto.greet.TwinsWarehouseCountReply.prototype.addWaretraystatusresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greet.TwinsWarehouseCountReply.WareTrayStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.TwinsWarehouseCountReply} returns this
 */
proto.greet.TwinsWarehouseCountReply.prototype.clearWaretraystatusresultsList = function() {
  return this.setWaretraystatusresultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greet.TwinsStockMovementCountReply.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.TwinsStockMovementCountReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.TwinsStockMovementCountReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.TwinsStockMovementCountReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsStockMovementCountReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    warehouseid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inboundquantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    outboundquantity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stockmovementresultsList: jspb.Message.toObjectList(msg.getStockmovementresultsList(),
    proto.greet.TwinsStockMovementCountReply.StockMovement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.TwinsStockMovementCountReply}
 */
proto.greet.TwinsStockMovementCountReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.TwinsStockMovementCountReply;
  return proto.greet.TwinsStockMovementCountReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.TwinsStockMovementCountReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.TwinsStockMovementCountReply}
 */
proto.greet.TwinsStockMovementCountReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWarehouseid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInboundquantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutboundquantity(value);
      break;
    case 4:
      var value = new proto.greet.TwinsStockMovementCountReply.StockMovement;
      reader.readMessage(value,proto.greet.TwinsStockMovementCountReply.StockMovement.deserializeBinaryFromReader);
      msg.addStockmovementresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.TwinsStockMovementCountReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.TwinsStockMovementCountReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.TwinsStockMovementCountReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsStockMovementCountReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWarehouseid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInboundquantity();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOutboundquantity();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStockmovementresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.greet.TwinsStockMovementCountReply.StockMovement.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.prototype.toObject = function(opt_includeInstance) {
  return proto.greet.TwinsStockMovementCountReply.StockMovement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greet.TwinsStockMovementCountReply.StockMovement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.toObject = function(includeInstance, msg) {
  var f, obj = {
    hour: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instockcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    outstockcount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greet.TwinsStockMovementCountReply.StockMovement}
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greet.TwinsStockMovementCountReply.StockMovement;
  return proto.greet.TwinsStockMovementCountReply.StockMovement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greet.TwinsStockMovementCountReply.StockMovement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greet.TwinsStockMovementCountReply.StockMovement}
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHour(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstockcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutstockcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greet.TwinsStockMovementCountReply.StockMovement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greet.TwinsStockMovementCountReply.StockMovement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHour();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstockcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOutstockcount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string hour = 1;
 * @return {string}
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.prototype.getHour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.TwinsStockMovementCountReply.StockMovement} returns this
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.prototype.setHour = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 inStockCount = 2;
 * @return {number}
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.prototype.getInstockcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsStockMovementCountReply.StockMovement} returns this
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.prototype.setInstockcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 outStockCount = 3;
 * @return {number}
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.prototype.getOutstockcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsStockMovementCountReply.StockMovement} returns this
 */
proto.greet.TwinsStockMovementCountReply.StockMovement.prototype.setOutstockcount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string warehouseId = 1;
 * @return {string}
 */
proto.greet.TwinsStockMovementCountReply.prototype.getWarehouseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greet.TwinsStockMovementCountReply} returns this
 */
proto.greet.TwinsStockMovementCountReply.prototype.setWarehouseid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 inboundQuantity = 2;
 * @return {number}
 */
proto.greet.TwinsStockMovementCountReply.prototype.getInboundquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsStockMovementCountReply} returns this
 */
proto.greet.TwinsStockMovementCountReply.prototype.setInboundquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 outboundQuantity = 3;
 * @return {number}
 */
proto.greet.TwinsStockMovementCountReply.prototype.getOutboundquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greet.TwinsStockMovementCountReply} returns this
 */
proto.greet.TwinsStockMovementCountReply.prototype.setOutboundquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated StockMovement stockMovementResults = 4;
 * @return {!Array<!proto.greet.TwinsStockMovementCountReply.StockMovement>}
 */
proto.greet.TwinsStockMovementCountReply.prototype.getStockmovementresultsList = function() {
  return /** @type{!Array<!proto.greet.TwinsStockMovementCountReply.StockMovement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greet.TwinsStockMovementCountReply.StockMovement, 4));
};


/**
 * @param {!Array<!proto.greet.TwinsStockMovementCountReply.StockMovement>} value
 * @return {!proto.greet.TwinsStockMovementCountReply} returns this
*/
proto.greet.TwinsStockMovementCountReply.prototype.setStockmovementresultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.greet.TwinsStockMovementCountReply.StockMovement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greet.TwinsStockMovementCountReply.StockMovement}
 */
proto.greet.TwinsStockMovementCountReply.prototype.addStockmovementresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.greet.TwinsStockMovementCountReply.StockMovement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greet.TwinsStockMovementCountReply} returns this
 */
proto.greet.TwinsStockMovementCountReply.prototype.clearStockmovementresultsList = function() {
  return this.setStockmovementresultsList([]);
};


/**
 * @enum {number}
 */
proto.greet.ModelType = {
  MODELTYPECONVERY: 0,
  MODELTYPEEQUIPMENT: 1,
  MODELTYPEWAREHOUSE: 2,
  MODELTYPEAGV: 3
};

/**
 * @enum {number}
 */
proto.greet.ModelState = {
  IDLE: 0,
  WORKING: 1,
  ASSEMBLING: 2,
  STOP: 3,
  PAUSEING: 4,
  MAINTAINING: 5
};

goog.object.extend(exports, proto.greet);
